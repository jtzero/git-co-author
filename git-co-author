#!/usr/bin/env bash

set -euo pipefail

readonly TRAILER_TOKEN="Co-authored-by"
readonly USAGE="usage: git co-author                Show co-authors in commit template
   or: git co-author <initials>...  Update co-authors in commit template
   or: git co-author authors        List authors in git config
   or: git co-author clear          Remove all co-authors from commit template
   or: git co-author select         Select authors in gitconfig or log if config is empty"

main() {
  if [[ $# -eq 0 ]]
  then
    trailers="$(show_trailers)"
    if [[ -z "$trailers" ]]
    then
      print_none
    else
      printf '%s\n' "$trailers"
    fi
    exit 0
  fi

  for arg in "$@"
  do
    if [[ "$arg" = "-h" ]] || [[ "$arg" = "--help" ]];
    then
      print_usage
      exit 0
    fi
  done
  case "$1" in
  authors)
    list_authors
    exit 0
    ;;
  clear)
    clear_trailers
    exit 0
    ;;
  select)
    shift
    select_authors "$@"
    exit 0
  esac

  update_trailers "$@"
}

show_trailers() {
  ensure_template_file
  print_trailers
}

print_usage() {
  echo "$USAGE"
}

print_none() {
  printf '%s\n' "No co-authors in commit template"
}

clear_trailers() {
  ensure_template_file
  remove_trailers
}

list_authors() {
  find_authors
}

find_authors() {
  {
    git log --pretty="%an <%ae>";
    git log --pretty="%(trailers:key=Co-authored-by,valueonly,only)" | awk NF;
  } | sort | uniq
}

select_authors() {
  if [[ $# -eq 0 ]]; then
    select_authors_from_pool
  else
    use_configured_authors_only "$@"
  fi
}

select_authors_from_pool() {
  local configured_authors="", selected_authors=""
  configured_authors="$(git config --get-regexp 'co-authors.*')" || true
  readonly configured_authors
  local -r configured_authors_without_config_prefix="$(printf '%s' "${configured_authors}" | cut -d' ' -f2-)"
  selected_authors="$(printf '%s\n%s\n' "${configured_authors_without_config_prefix}" "$(find_authors)" | fzf --multi)"
  readonly selected_authors
  local selected_authors_ary=()
  if [ -n "${selected_authors}" ]; then
    while IFS= read -r selected_author; do
      selected_authors_ary[${#selected_authors_ary[@]}]="${selected_author}"
    done <<<"${selected_authors}"
    update_trailers_without_initials "${selected_authors_ary[@]}"
  fi
}

use_configured_authors_only() {
  update_trailers "$@"
}

update_trailers_without_initials() {
  ensure_template_file
  remove_trailers
  add_trailers_without_initials "$@"
  print_trailers
}

add_trailers_without_initials() {
  for user in "$@";
  do
    git interpret-trailers --trailer "$TRAILER_TOKEN: $user" --in-place "$template_file"
  done
}


update_trailers() {
  ensure_template_file
  must_have_initials "$@"
  remove_trailers
  add_trailers "$@"
  print_trailers
}

abort() {
  >&2 echo "$1"
  exit 1
}

ensure_template_file() {
  must_have_config "commit.template" "commit template is not configured

Example:
  git config --global commit.template '~/.git-commit-template'"

  template_file=$(git config commit.template)
  template_file="${template_file/#\~/$HOME}"  # Replace '~' with $HOME

  touch "$template_file"
}

must_have_config() {
  local key=$1
  local error=$2
  if ! git config "$key" &> /dev/null
  then
    abort "$error"
  fi

  if [[ -z $(git config "$key") ]]
  then
    abort "$error"
  fi
}

must_have_initials() {
  for initials in "$@"
  do
      must_have_config "co-authors.$initials" "co-author '$initials' is not configured

Example:
  git config --global co-authors.aa 'Ann Author <ann.author@example.com>'"
  done
}

add_trailers() {
  for initials in "$@"
  do
    value=$(git config "co-authors.$initials")
    git interpret-trailers --trailer "$TRAILER_TOKEN: $value" --in-place "$template_file"
  done
}

remove_trailers() {
  local temp_file
  temp_file=$(mktemp)
  sed "/$TRAILER_TOKEN/d" "$template_file" > "$temp_file"
  mv "$temp_file" "$template_file"
}

print_trailers() {
  sed -n "/$TRAILER_TOKEN/p" "$template_file"
}

print_configured_authors() {
  if ! git config --get-regexp "co-authors.*" &> /dev/null
  then
    echo "No authors in config.

Example:
  git config --global co-authors.aa 'Ann Author <ann.author@example.com>'"
  else
    git config --get-regexp 'co-authors.*' |
      sed -E "s/co-authors.([a-z0-9-]+)[[:space:]](.*)/\1|'\2'/" |
      column -t -s"|" |
      sort
  fi
}

check_requirements() {
  if ! command -v fzf > /dev/null ; then
    abort "Missing required 'fzf'"
  fi
}

NEW_AUTHOR_INITIALS=""
configure_author_initials() {
  local author="$1"
  local initials="" first_init="" second_init="" second_char=""
  git_full_names_no_characters="$(printf '%s' "${author}" | cut -d '<' -f1 | tr '-' ' ' | grep --color=none -o '[A-z0-9[:space:]]*')"
  first_init="$(printf '%s' "${git_full_names_no_characters}" | awk '{print substr($1,1,1)}' | tr -d '[:space:]')"
  second_init="$(printf '%s' "${git_full_names_no_characters}" | cut -d' ' -f2 | cut -c1 | tr -d '[:space]')"
  second_char="$(printf '%s' "${git_full_names_no_characters}" | cut -c2 | tr -d '[:space:]')"
  initials="$(printf '%s' "${first_init}${second_init}${second_char}" | tr -d '[:space:]' | cut -c1-2 | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]')"
  NEW_AUTHOR_INITIALS="${initials}"
  git config --global "co-authors.${initials}" "${author}" > /dev/null
}


main "$@"
